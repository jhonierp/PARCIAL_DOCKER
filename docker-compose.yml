services:
  # Base de datos MySQL
  mysql:
    image: mysql:8
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword123
      MYSQL_DATABASE: empresa_db
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin123
    # NO exponemos el puerto 3306 al exterior
    # Solo es accesible desde otros contenedores en la misma red
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - empresa_network

  # Interfaz web para MySQL
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin_web
    restart: always
  
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: admin
      PMA_PASSWORD: admin123
    ports:
      - "8081:80"
    depends_on:
      - mysql
    networks:
      - empresa_network

  # WordPress CMS
  wordpress:
    image: wordpress:latest
    container_name: wordpress_site
    restart: always
    environment:
      WORDPRESS_DB_HOST: mysql:3306
      WORDPRESS_DB_NAME: empresa_db
      WORDPRESS_DB_USER: admin
      WORDPRESS_DB_PASSWORD: admin123
    ports:
      - "8080:80"
    volumes:
      - wordpress_data:/var/www/html
    depends_on:
      - mysql
    networks:
      - empresa_network

  # API Node.js personalizada
  backend:
    build: ./backend
    container_name: nodejs_api
    restart: always
    environment:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: empresa_db
      DB_USER: admin
      DB_PASSWORD: admin123
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
    ports:
      - "3000:3000"
    depends_on:
      - mysql
      - mailhog
    networks:
      - empresa_network

  # Frontend React/Vue/Angular
   # Frontend React
  frontend:
    build: ./frontend
    container_name: empresa_frontend
    restart: always
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:3000  # Cambiar a localhost para el navegador
    depends_on:
      - backend
    networks:
      - empresa_network

  # Servicio de correo para pruebas
  mailhog:
    image: mailhog/mailhog
    container_name: mail_service
    restart: always
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    networks:
      - empresa_network

  # Proxy inverso Nginx
  nginx:
    image: nginx:alpine
    container_name: reverse_proxy
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - wordpress
      - backend
      - frontend  # Agregamos dependencia del frontend
    networks:
      - empresa_network

  # Base de datos MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongo_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    # NO exponemos el puerto 27017 al exterior
    # Solo es accesible desde otros contenedores en la misma red
    volumes:
      - mongodb_data:/data/db
    networks:
      - empresa_network

  # Interfaz web para MongoDB
  mongo_express:
    image: mongo-express
    container_name: mongo_express_web
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=admin123
      - ME_CONFIG_MONGODB_SERVER=mongodb
    ports:
      - "8083:8081"
    depends_on:
      - mongodb
    networks:
      - empresa_network
#doker adminmong
  adminmongo:
      image: adicom/admin-mongo
      container_name: adminmongo_web
      restart: always
      environment:
        - HOST=0.0.0.0
        - DB_HOST=mongodb
        - DB_PORT=27017
      ports:
        - "8082:1234"
      depends_on:
        - mongodb
      networks:
        - empresa_network

# Volúmenes para persistencia de datos

volumes:
  mysql_data:
  wordpress_data:
  mongodb_data:

# Red compartida para todos los servicios
networks:
  empresa_network:
    driver: bridge

# Docker Compose para una empresa con servicios web, base de datos y API
# Incluye MySQL, WordPress, Node.js, MongoDB, Mailhog y Nginx
# Utiliza una red compartida para comunicación entre contenedores
# Exponemos puertos específicos para acceder a los servicios desde el host
# Utilizamos volúmenes para persistencia de datos en MySQL y MongoDB
# Mailhog para pruebas de correo electrónico
# AdminMongo para administración de MongoDB
# Mongo Express para interfaz web de MongoDB
# Nginx como proxy inverso para redirigir tráfico a los servicios web
# Frontend puede ser React, Vue o Angular, configurado para comunicarse con la API Node.js
# AdminMongo para administración de MongoDB
# Mongo Express para interfaz web de MongoDB